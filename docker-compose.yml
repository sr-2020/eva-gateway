version: "3.6"

services:
  auth-app:
    image: ${AUTH_IMAGE_APP}
    ports:
      - ${AUTH_APP_PORT}:80
    environment:
      SKIP_COMPOSER: 1
      SKIP_CHOWN: 1
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: auth
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      MAIL_DRIVER: ${MAIL_DRIVER}
      MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
      MAILGUN_SECRET: ${MAILGUN_SECRET}
    links:
      - postgres

  auth-redis:
    image: ${IMAGE_REDIS}

  position-app:
    image: ${POSITION_IMAGE_APP}
    ports:
      - ${POSITION_APP_PORT}:80
    environment:
      SKIP_COMPOSER: 1
      SKIP_CHOWN: 1
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: position
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    links:
      - database

  position-redis:
    image: ${IMAGE_REDIS}

  billing-app:
    image: ${BILLING_IMAGE_APP}
    ports:
      - ${BILLING_APP_PORT}:3000
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_DATABASE: billing
      POSTGRESQL_USER: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
    links:
      - postgres

  billingapi-app:
    image: ${BILLINGAPI_IMAGE_APP}
    ports:
      - ${BILLINGAPI_APP_PORT}:80
    environment:
      POSTGRESQL_USER: app
      POSTGRESQL_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
    links:
      - postgres

  push-app:
    image: ${PUSH_IMAGE_APP}
    ports:
      - ${PUSH_APP_PORT}:3000
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_DATABASE: push
      POSTGRESQL_USER: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      FIREBASE_SERVER_TOKEN: ${PUSH_FIREBASE_SERVER_TOKEN}
    links:
      - postgres

  model-engine-app:
    image: ${MODEL_ENGINE_APP}
    ports:
      - ${MODEL_ENGINE_APP_PORT}:3000

  models-manager-app:
    image: ${MODELS_MANAGER_APP}
    ports:
      - ${MODELS_MANAGER_APP_PORT}:3000
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_DATABASE: models
      POSTGRESQL_USER: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
    links:
      - postgres

  gateway-app:
    image: ${GATEWAY_IMAGE_APP}
    ports:
      - ${GATEWAY_APP_PORT}:80
    environment:
      GATEWAY_PORT: 80
      AUTH_HOST: http://auth-app
      POSITION_HOST: http://position-app
      BILLING_HOST: http://billing-app:3000
      PUSH_HOST: http://push-app:3000
      MODEL_ENGINE_HOST: http://model-engine-app:3000
      MODELS_MANAGER_HOST: http://models-manager-app:3000
    restart: on-failure
    links:
      - auth-app
      - position-app
      - billing-app

  database:
    image: ${IMAGE_DATABASE}
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - eva-platform-database:/var/lib/mysql
    environment:
      MYSQL_DATABASE: test
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  pma:
    image: ${IMAGE_PMA}
    ports:
      - ${PMA_PORT}:80
    environment:
      PMA_HOST: database
    links:
      - database

  postgres:
    image: ${IMAGE_POSTGRES}
    restart: always
    volumes:
      - eva-platform-postgres:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD}

  ppa:
    image: ${IMAGE_PPA}
    restart: always
    ports:
      - 7051:80
    environment:
      PHP_PG_ADMIN_SERVER_HOST: postgres
    links:
      - postgres

  backup:
    image: ${IMAGE_BACKUP}
    environment:
      APP_PORT: 80
      APP_PASSWORD: ${APP_PASSWORD}
      APP_CATALOG: ${APP_CATALOG}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: ${BACKUP_POSTGRES_USER}
      PGPASSWORD: ${BACKUP_POSTGRES_PASSWORD}
    restart: on-failure
    links:
      - postgres

  cron:
    image: ${IMAGE_CRON}
    restart: always
    environment:
      CRON_STRINGS: "0 * * * * wget --post-data '' http://backup/v1/backup"
    links:
      - backup

volumes:
  eva-platform-database:
  eva-platform-postgres:
